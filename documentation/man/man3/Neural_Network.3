.TH "Neural_Network" 3 "Fri Jun 21 2013" "Version 1.0" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Neural_Network \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <NeuralNetwork\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNeural_Network\fP ()"
.br
.RI "\fINeural Network class constructor\&. \fP"
.ti -1c
.RI "void \fBset_input_len\fP (int)"
.br
.RI "\fISet number of input nodes to int i\&. \fP"
.ti -1c
.RI "void \fBset_output_len\fP (int)"
.br
.RI "\fISet number of output to int i\&. \fP"
.ti -1c
.RI "void \fBset_hidden_len\fP (int)"
.br
.RI "\fISet hidden nodes to int i\&. \fP"
.ti -1c
.RI "void \fBset_AV\fP (int)"
.br
.RI "\fISet Activation function to be used to int i\&. \fP"
.ti -1c
.RI "void \fBset_minimum_error\fP (double)"
.br
.RI "\fISet minimum error to double d\&. \fP"
.ti -1c
.RI "void \fBset_learning_rate\fP (double)"
.br
.RI "\fISet learning rate to double d\&. \fP"
.ti -1c
.RI "int \fBget_input_len\fP ()"
.br
.RI "\fIGet int number of input nodes\&. \fP"
.ti -1c
.RI "int \fBget_output_len\fP ()"
.br
.RI "\fIGet int number of output nodes\&. \fP"
.ti -1c
.RI "int \fBget_hidden_len\fP ()"
.br
.RI "\fIGet int number of hidden nodes\&. \fP"
.ti -1c
.RI "void \fBdo_function\fP (int)"
.br
.RI "\fITrain or test the network\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinit\fP ()"
.br
.RI "\fIInitialize weights and biases with values between -0\&.5 and 0\&.5\&. \fP"
.ti -1c
.RI "void \fBtrain\fP ()"
.br
.RI "\fITrain the neural network: \fP"
.ti -1c
.RI "void \fBtest\fP ()"
.br
.RI "\fITest the neural network\&. \fP"
.ti -1c
.RI "double \fBsegmoidal_fn\fP (double, int)"
.br
.RI "\fICalculates the segmoidal/segmoidal inverse of a double [x]\&. \fP"
.ti -1c
.RI "void \fBpropagate\fP ()"
.br
.RI "\fIPropagate input starting from the input layer up to the output layer\&. Uses softmax activation function\&. \fP"
.ti -1c
.RI "double \fBcal_error\fP ()"
.br
.RI "\fICalculate the error signal for each node\&. Uses corss entropy error function\&. \fP"
.ti -1c
.RI "void \fBback_propagate\fP ()"
.br
.RI "\fIBack propagate the error starting from the output layer down to the input layer\&. \fP"
.ti -1c
.RI "bool \fBinput_absent\fP ()"
.br
.ti -1c
.RI "void \fBcalculate_net\fP (double &, double &)"
.br
.RI "\fICalculates the net for each node\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "int \fBinput_len\fP"
.br
.ti -1c
.RI "int \fBhidden_len\fP"
.br
.ti -1c
.RI "int \fBoutput_len\fP"
.br
.ti -1c
.RI "int \fBAV\fP"
.br
.ti -1c
.RI "int \fBdataset_size\fP"
.br
.ti -1c
.RI "double \fBerror\fP"
.br
.ti -1c
.RI "double \fBminimum_error\fP"
.br
.ti -1c
.RI "double \fBlearning_rate\fP"
.br
.ti -1c
.RI "double \fBmomentum\fP"
.br
.ti -1c
.RI "double \fBinput\fP [\fBinput_l\fP]"
.br
.ti -1c
.RI "double \fBhidden\fP [\fBhidden_l\fP]"
.br
.ti -1c
.RI "double \fBoutput\fP [\fBoutput_l\fP]"
.br
.ti -1c
.RI "double \fBnetH\fP [\fBhidden_l\fP]"
.br
.ti -1c
.RI "double \fBnetO\fP [\fBoutput_l\fP]"
.br
.ti -1c
.RI "double \fBexpected_o\fP [\fBoutput_l\fP]"
.br
.ti -1c
.RI "double \fBbias_O\fP [\fBoutput_l\fP]"
.br
.ti -1c
.RI "double \fBbias_H\fP [\fBhidden_l\fP]"
.br
.ti -1c
.RI "double \fBWh\fP [\fBhidden_l\fP][\fBinput_l\fP]"
.br
.ti -1c
.RI "double \fBWo\fP [\fBoutput_l\fP][\fBhidden_l\fP]"
.br
.ti -1c
.RI "double \fBtempWo\fP [\fBoutput_l\fP][\fBhidden_l\fP]"
.br
.ti -1c
.RI "double \fBdelta_O\fP [\fBoutput_l\fP]"
.br
.ti -1c
.RI "double \fBdelta_H\fP [\fBhidden_l\fP]"
.br
.ti -1c
.RI "map< char, double > \fBinput_rank\fP"
.br
.ti -1c
.RI "map< string, int > \fBoutput_rank\fP"
.br
.ti -1c
.RI "map< int, string > \fBrank_output\fP"
.br
.ti -1c
.RI "vector< vector< double > > \fBinput_dataset\fP"
.br
.ti -1c
.RI "vector< vector< double > > \fBoutput_dataset\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBFile_Manager\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 6 of file NeuralNetwork\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Neural_Network::Neural_Network ()"

.PP
Neural Network class constructor\&. 
.PP
Definition at line 7 of file NN_constructor\&.cpp\&.
.PP
References AV, dataset_size, hidden_len, input_len, input_rank, learning_rate, minimum_error, momentum, output_len, and segmoidal\&.
.SH "Member Function Documentation"
.PP 
.SS "void Neural_Network::back_propagate ()\fC [private]\fP"

.PP
Back propagate the error starting from the output layer down to the input layer\&. \fBPrecondition:\fP
.RS 4
Delta signal for each node has been calculated\&. 
.PP
Bias and Weights doesn't hold garpage\&. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
Bias and Weights are updated\&. 
.RE
.PP

.PP
Definition at line 211 of file NN\&.cpp\&.
.PP
References bias_H, bias_O, delta_H, delta_O, fori, forj, hidden, hidden_len, input, input_len, learning_rate, momentum, output_len, Wh, and Wo\&.
.SS "double Neural_Network::cal_error ()\fC [private]\fP"

.PP
Calculate the error signal for each node\&. Uses corss entropy error function\&. \fBReturns:\fP
.RS 4
[total error] 
.RE
.PP
\fBPrecondition:\fP
.RS 4
Actual output is calculated using function [propagate]\&. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
Delta signal for all nodes is calculated\&. 
.RE
.PP

.PP
Definition at line 239 of file NN\&.cpp\&.
.PP
References calculate_net(), delta_H, delta_O, expected_o, fori, forj, hidden_len, netH, netO, output, and output_len\&.
.SS "void Neural_Network::calculate_net (double &max, double &maxO)\fC [private]\fP"

.PP
Calculates the net for each node\&. \fBPrecondition:\fP
.RS 4
Input dataset is filled\&. 
.PP
Weights dataset is initialized\&. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
Net is caculated for Output and Hidden nodes\&. 
.RE
.PP

.PP
Definition at line 274 of file NN\&.cpp\&.
.PP
References fori, forj, hidden_len, input, input_len, netH, netO, output_len, Wh, and Wo\&.
.SS "void Neural_Network::do_function (intwhat)"

.PP
Train or test the network\&. \fBParameters:\fP
.RS 4
\fI[what]\fP Determines weather to train or to test\&. 
.RE
.PP

.PP
Definition at line 7 of file NN\&.cpp\&.
.PP
References test(), and train()\&.
.SS "int Neural_Network::get_hidden_len ()"

.PP
Get int number of hidden nodes\&. 
.PP
Definition at line 24 of file NN_getters\&.cpp\&.
.PP
References hidden_len\&.
.SS "int Neural_Network::get_input_len ()"

.PP
Get int number of input nodes\&. 
.PP
Definition at line 6 of file NN_getters\&.cpp\&.
.PP
References input_len\&.
.SS "int Neural_Network::get_output_len ()"

.PP
Get int number of output nodes\&. 
.PP
Definition at line 15 of file NN_getters\&.cpp\&.
.PP
References output_len\&.
.SS "void Neural_Network::init ()\fC [private]\fP"

.PP
Initialize weights and biases with values between -0\&.5 and 0\&.5\&. 
.PP
Definition at line 55 of file NN\&.cpp\&.
.PP
References bias_H, bias_O, fori, forj, hidden_len, input_len, output_len, Wh, and Wo\&.
.SS "bool Neural_Network::input_absent ()\fC [private]\fP"

.SS "void Neural_Network::propagate ()\fC [private]\fP"

.PP
Propagate input starting from the input layer up to the output layer\&. Uses softmax activation function\&. \fBPrecondition:\fP
.RS 4
Input dataset is filled 
.RE
.PP
\fBPostcondition:\fP
.RS 4
Hidden and Output nodes are computed\&. 
.RE
.PP

.PP
Definition at line 178 of file NN\&.cpp\&.
.PP
References calculate_net(), fori, hidden, hidden_len, netH, netO, output, and output_len\&.
.SS "double Neural_Network::segmoidal_fn (doublex, intmode)\fC [private]\fP"

.PP
Calculates the segmoidal/segmoidal inverse of a double [x]\&. \fBParameters:\fP
.RS 4
\fI[mode]\fP Determines weather to calculate segmoidal or inverse\&. 
.RE
.PP

.PP
Definition at line 38 of file NN\&.cpp\&.
.SS "void Neural_Network::set_AV (inti)"

.PP
Set Activation function to be used to int i\&. \fBParameters:\fP
.RS 4
\fI[int\fP i] Activation function to be used\&. 
.RE
.PP

.PP
Definition at line 34 of file NN_setters\&.cpp\&.
.PP
References AV\&.
.SS "void Neural_Network::set_hidden_len (inti)"

.PP
Set hidden nodes to int i\&. \fBParameters:\fP
.RS 4
\fI[int\fP i] Number of nodes on the hidden layer\&. 
.RE
.PP

.PP
Definition at line 25 of file NN_setters\&.cpp\&.
.PP
References hidden_len\&.
.SS "void Neural_Network::set_input_len (inti)"

.PP
Set number of input nodes to int i\&. \fBParameters:\fP
.RS 4
\fI[int\fP i] Number of nodes on the input layer\&. 
.RE
.PP

.PP
Definition at line 7 of file NN_setters\&.cpp\&.
.PP
References input_len\&.
.SS "void Neural_Network::set_learning_rate (doubled)"

.PP
Set learning rate to double d\&. \fBParameters:\fP
.RS 4
\fI[double\fP d] Learning rate of the neural network\&. 
.RE
.PP

.PP
Definition at line 52 of file NN_setters\&.cpp\&.
.PP
References learning_rate\&.
.SS "void Neural_Network::set_minimum_error (doubled)"

.PP
Set minimum error to double d\&. \fBParameters:\fP
.RS 4
\fI[double\fP d] Least acceptable error\&. 
.RE
.PP

.PP
Definition at line 43 of file NN_setters\&.cpp\&.
.PP
References minimum_error\&.
.SS "void Neural_Network::set_output_len (inti)"

.PP
Set number of output to int i\&. \fBParameters:\fP
.RS 4
\fI[int\fP i] Number of nodes on the output layer\&. 
.RE
.PP

.PP
Definition at line 16 of file NN_setters\&.cpp\&.
.PP
References output_len\&.
.SS "void Neural_Network::test ()\fC [private]\fP"

.PP
Test the neural network\&. \fBPrecondition:\fP
.RS 4
Input_dataset is filled\&. 
.PP
Weights dataset is filled\&. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
Output is filled\&. 
.RE
.PP

.PP
Definition at line 147 of file NN\&.cpp\&.
.PP
References dataset_size, error, expected_o, fori, forj, fork, input, input_dataset, input_len, output, output_dataset, output_len, pow(), and propagate()\&.
.SS "void Neural_Network::train ()\fC [private]\fP"

.PP
Train the neural network: Until error is under threshold or maximum number of iterations is reached\&. 
.PP
\fBPrecondition:\fP
.RS 4
Input Dataset is filled\&. 
.PP
Expected Output Dataset is filled\&. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
Weights are optimal\&. 
.RE
.PP

.PP
Definition at line 89 of file NN\&.cpp\&.
.PP
References back_propagate(), cal_error(), dataset_size, error, expected_o, fori, fork, init(), input, input_dataset, input_len, max_iterations, minimum_error, output_dataset, output_len, and propagate()\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBFile_Manager\fP\fC [friend]\fP"

.PP
Definition at line 8 of file NeuralNetwork\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "int Neural_Network::AV\fC [private]\fP"

.PP
Definition at line 33 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::bias_H[\fBhidden_l\fP]\fC [private]\fP"

.PP
Definition at line 48 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::bias_O[\fBoutput_l\fP]\fC [private]\fP"

.PP
Definition at line 47 of file NeuralNetwork\&.h\&.
.SS "int Neural_Network::dataset_size\fC [private]\fP"

.PP
Definition at line 34 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::delta_H[\fBhidden_l\fP]\fC [private]\fP"

.PP
Definition at line 57 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::delta_O[\fBoutput_l\fP]\fC [private]\fP"

.PP
Definition at line 56 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::error\fC [private]\fP"

.PP
Definition at line 35 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::expected_o[\fBoutput_l\fP]\fC [private]\fP"

.PP
Definition at line 46 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::hidden[\fBhidden_l\fP]\fC [private]\fP"

.PP
Definition at line 42 of file NeuralNetwork\&.h\&.
.SS "int Neural_Network::hidden_len\fC [private]\fP"

.PP
Definition at line 31 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::input[\fBinput_l\fP]\fC [private]\fP"

.PP
Definition at line 41 of file NeuralNetwork\&.h\&.
.SS "vector<vector<double> > Neural_Network::input_dataset\fC [private]\fP"

.PP
Definition at line 68 of file NeuralNetwork\&.h\&.
.SS "int Neural_Network::input_len\fC [private]\fP"

.PP
Definition at line 30 of file NeuralNetwork\&.h\&.
.SS "map<char,double> Neural_Network::input_rank\fC [private]\fP"

.PP
Definition at line 60 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::learning_rate\fC [private]\fP"

.PP
Definition at line 37 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::minimum_error\fC [private]\fP"

.PP
Definition at line 36 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::momentum\fC [private]\fP"

.PP
Definition at line 38 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::netH[\fBhidden_l\fP]\fC [private]\fP"

.PP
Definition at line 44 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::netO[\fBoutput_l\fP]\fC [private]\fP"

.PP
Definition at line 45 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::output[\fBoutput_l\fP]\fC [private]\fP"

.PP
Definition at line 43 of file NeuralNetwork\&.h\&.
.SS "vector<vector<double> > Neural_Network::output_dataset\fC [private]\fP"

.PP
Definition at line 69 of file NeuralNetwork\&.h\&.
.SS "int Neural_Network::output_len\fC [private]\fP"

.PP
Definition at line 32 of file NeuralNetwork\&.h\&.
.SS "map<string,int> Neural_Network::output_rank\fC [private]\fP"

.PP
Definition at line 63 of file NeuralNetwork\&.h\&.
.SS "map<int,string> Neural_Network::rank_output\fC [private]\fP"

.PP
Definition at line 65 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::tempWo[\fBoutput_l\fP][\fBhidden_l\fP]\fC [private]\fP"

.PP
Definition at line 53 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::Wh[\fBhidden_l\fP][\fBinput_l\fP]\fC [private]\fP"

.PP
Definition at line 51 of file NeuralNetwork\&.h\&.
.SS "double Neural_Network::Wo[\fBoutput_l\fP][\fBhidden_l\fP]\fC [private]\fP"

.PP
Definition at line 52 of file NeuralNetwork\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code\&.
